#!/usr/bin/env python

"""Select and annotate reads that harbor a short tandem repeat.

    usage:
        select_STR_reads [options] reads1.fq reads2.fq ...

    where the options are:
        -h,--help : print usage and quit.
        -n,--numcopies: require at least this number of copies. [2]
        -f,--flank: require >= these many bps around the STR on each side. [31]
        -v,--version: print version and quit.
        -2,--2mer : print reads that harbor only 2mers.
        -3,--3mer : print reads that harbor only 3mers.
        -4,--4mer : print reads that harbor only 4mers.
        -5,--5mer : print reads that harbor only 5mers.
        -6,--6mer : print reads that harbor only 6mers.
        -r,--removehm: ignore STR that harbor homopolymer runs.

    This script uses the "re" module in python to find all STR's of length 2-6.

    Notes:
    a) We throw away the read if that longest motif has an "N" in it.
    b) We print the motif, number of copies of the motif, 0 based start position
       of the motif, and end position of the motif in the name of the
       read. We also print the information about the motif if the read was
       reverse complemented and analyzed.
    c) The user should always select a flanking distance that is longer than
       the kmer length he/she intends to use for the subsequent analyses.
    d) We print Sanger quality values for the reads that are selected.
    e) In case where we find an STR that could be the result of repetition of
       two or more mers, then we always select the lower'mer. For example,
       ATATATAT can be a result of repetition of AT or ATAT. We select AT in
       this example.
    f) reads1.fq, reads2.fq, ... are all files in FASTQ format which contain the
       reads from a single sample.
    g) The read files (reads1.fq, reads2.fq, ...) can be zipped. This module
       can handle them safely if the file names end with a ".gz".
    h) The user should use --2mer if they are only interested in finding reads
       that harbor a STR formed as a result of repetition of a 2mer. --2mer
       --3mer will result in finding of reads that harbor either a 2mer STR or a
       3mer STR and so on. By default reads that harbor [2,6]mer all found.
    i) We include homopolymer runs in the output. For example "AA" is considered
       a valid motif/pattern. This can be disabled using the "-r" option.
"""

"""Undocumented flags that are only useful for debugging.
 
    -d,--debug : print debug information.
    -c,--check : check whether we have read with the following motif and number
                 of copies. If they exist in the read dataset, print out the 
                 reason why they were not selected by this script.
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError

from select_STR_reads import *

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# Do we want the debug information to be printed?
debug_flag = False

def main(filenames, num_minimum_copies, flanking_distance,
         illumina_quals, check_strs, only_k_mers, remove_homopolymers):
    """Find the reads that harbor STR and satisfy certain conditions.
    """
    # STRs are short sequences of DNA, normally of length 2-6 base pairs, that 
    # are repeated numerous times. The following python pattern can accurately 
    # describe STRs.
    patterns = []
    for k in only_k_mers:
        patterns.append(r'(?=((?=(.{%d}))\2{%d,}))' % (k,num_minimum_copies))

    # Is this a run where we want to check the reason why certain STRs were not
    # found? Read the file to save the STRs I am to look out for.
    to_check = ReadSTRList(check_strs)

    for filename in filenames:
        records = fastq(filename)

        for r in records:
            s = r.fastqsequence
            if debug_flag: 
                print >> stderr, "-"*79
                print >> stderr, "%s" % s.name

            # Does this sequence have a short tandem repeat in it?
            match = MatchPattersAndReportBest(s.seq, 
                                              patterns, remove_homopolymers)
            if match == None:
                if debug_flag: print >> stderr, "0 valid matches."
                continue
            if debug_flag: print >> stderr, match   

            # What about the matches when the read is reverse complemented?
            rc_match = MatchPattersAndReportBest(ReverseComplement(s.seq),
                                                 patterns, remove_homopolymers)
            if rc_match == None:
                if debug_flag: print >> stderr, "0 valid matches."
                continue

            # Lets register the fact that we found this STR associated read.
            if check_strs: RegisterSTR(s.seq, match, rc_match, to_check)

            # Print the read details along with the motif, position of the STR
            PrintSequence(s, match, rc_match)

        records.close()
        print >> stderr, "Done processing %s" % filename
                    
    if check_strs:
        PrintPerformanceLog(to_check)

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdn:f:ic:v23456r",["help", "debug", "numcopies=", "flanks=", "illumina", "check=", "version", "2mer", "3mer", "4mer", "5mer", "6mer", "removehm"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    num_minimum_copies = 2
    flanking_distance = 31
    illumina_quals = False
    check_strs = None
    print_version = False
    only_k_mer = []
    remove_homopolymers = False
    debug_flag = False

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-n", "--numcopies"):
            num_minimum_copies = int(a) 
        elif o in ("-f", "--flanks"):
            flanking_distance = int(a)
        elif o in ("-i", "--illumina"):
            illumina_quals = True
        elif o in ("-c", "--check"):
            check_strs = a
        elif o in ("-v", "--version"):
            print_version = True
        elif o in ("-2","-3","-4","-5","-6"):
            only_k_mer.append(int(o[1]))
        elif o in ("--2mer", "--3mer", "--4mer", "--5mer", "--6mer"):
            only_k_mer.append(int(o[2]))
        elif o in ("-r", "--removehm"):
            remove_homopolymers = True
        else:
            assert False, "unhandled option"

    # Do we want to print the version and quit?
    if print_version == True:
        print >> stderr, "Program: select_STR_reads"
        print >> stderr, "Version: 0.2 released 20140707"
        print >> stderr, "Contact: Aakrosh Ratan (ratan@bx.psu.edu)"
        exit(0)

    if len(args) < 1:
        print >> stderr, __doc__
        exit(3)

    only_k_mer = list(set(only_k_mer))
    if len(only_k_mer) == 0:
        only_k_mer = [2,3,4,5,6]
    select_str_reads(args, num_minimum_copies, flanking_distance, 
                     illumina_quals, check_strs, only_k_mer,
                     remove_homopolymers, debug_flag)
